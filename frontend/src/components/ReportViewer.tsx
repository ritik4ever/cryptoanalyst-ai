import React, { useState } from 'react';
import { FileText, Download, Share2, DollarSign, Calendar, Star } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { Analysis } from '../types';

interface ReportViewerProps {
  analysis: Analysis;
}

const ReportViewer: React.FC<ReportViewerProps> = ({ analysis }) => {
  const [activeTab, setActiveTab] = useState<'summary' | 'full'>('summary');

  if (!analysis.result) {
    return (
      <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Generating your analysis...</p>
        </div>
      </div>
    );
  }

  const { result } = analysis;
  const cryptoData = result.cryptoData;

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(value);
  };

  const formatLargeNumber = (value: number) => {
    if (value >= 1e9) {
      return `$${(value / 1e9).toFixed(2)}B`;
    } else if (value >= 1e6) {
      return `$${(value / 1e6).toFixed(2)}M`;
    } else if (value >= 1e3) {
      return `$${(value / 1e3).toFixed(2)}K`;
    }
    return formatCurrency(value);
  };

  const getChangeColor = (change: number) => {
    return change >= 0 ? 'text-green-600' : 'text-red-600';
  };

  const exportReport = () => {
    const content = `
# CryptoAnalyst AI Report
**Analysis Type:** ${analysis.type.replace('_', ' ')}
**Symbol:** ${cryptoData.symbol}
**Generated:** ${new Date(result.generatedAt).toLocaleString()}

## Executive Summary
${result.executiveSummary}

## Full Analysis
${result.fullAnalysis}

## Market Data
- Price: ${formatCurrency(cryptoData.price)}
- Market Cap: ${formatLargeNumber(cryptoData.marketCap)}
- 24h Change: ${cryptoData.change24h.toFixed(2)}%
- 7d Change: ${cryptoData.change7d.toFixed(2)}%

---
Generated by CryptoAnalyst AI
    `;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `crypto-analysis-${cryptoData.symbol}-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareReport = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `CryptoAnalyst AI - ${cryptoData.symbol} Analysis`,
          text: result.executiveSummary,
          url: window.location.href,
        });
      } catch (error) {
        console.log('Share cancelled');
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      alert('Link copied to clipboard!');
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold">{cryptoData.name} ({cryptoData.symbol})</h2>
            <p className="text-blue-100">
              {analysis.type.replace('_', ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase())} Analysis
            </p>
          </div>
          <div className="text-right">
            <div className="text-2xl font-bold">{formatCurrency(cryptoData.price)}</div>
            <div className={`text-sm ${getChangeColor(cryptoData.change24h)}`}>
              {cryptoData.change24h >= 0 ? '+' : ''}{cryptoData.change24h.toFixed(2)}% (24h)
            </div>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
          <div className="bg-white bg-opacity-20 rounded-lg p-3">
            <div className="text-sm text-blue-100">Market Cap</div>
            <div className="font-semibold">{formatLargeNumber(cryptoData.marketCap)}</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-lg p-3">
            <div className="text-sm text-blue-100">24h Volume</div>
            <div className="font-semibold">{formatLargeNumber(cryptoData.volume24h)}</div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-lg p-3">
            <div className="text-sm text-blue-100">7d Change</div>
            <div className={`font-semibold ${getChangeColor(cryptoData.change7d)}`}>
              {cryptoData.change7d >= 0 ? '+' : ''}{cryptoData.change7d.toFixed(2)}%
            </div>
          </div>
          <div className="bg-white bg-opacity-20 rounded-lg p-3">
            <div className="text-sm text-blue-100">Rank</div>
            <div className="font-semibold">#{cryptoData.rank}</div>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-1 text-gray-600">
              <Calendar className="h-4 w-4" />
              <span className="text-sm">
                {new Date(result.generatedAt).toLocaleDateString()}
              </span>
            </div>
            <div className="flex items-center space-x-1 text-green-600">
              <DollarSign className="h-4 w-4" />
              <span className="text-sm font-medium">${analysis.price}</span>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={shareReport}
              className="flex items-center space-x-1 px-3 py-1.5 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              <Share2 className="h-4 w-4" />
              <span className="text-sm">Share</span>
            </button>
            <button
              onClick={exportReport}
              className="flex items-center space-x-1 px-3 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Download className="h-4 w-4" />
              <span className="text-sm">Export</span>
            </button>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <div className="flex">
          <button
            onClick={() => setActiveTab('summary')}
            className={`px-6 py-3 font-medium text-sm border-b-2 ${
              activeTab === 'summary'
                ? 'border-blue-600 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Executive Summary
          </button>
          <button
            onClick={() => setActiveTab('full')}
            className={`px-6 py-3 font-medium text-sm border-b-2 ${
              activeTab === 'full'
                ? 'border-blue-600 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Full Analysis
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="p-6">
        {activeTab === 'summary' ? (
          <div>
            <div className="flex items-center space-x-2 mb-4">
              <Star className="h-5 w-5 text-yellow-500" />
              <h3 className="text-lg font-semibold text-gray-900">Executive Summary</h3>
            </div>
            <div className="prose max-w-none">
              <ReactMarkdown>{result.executiveSummary}</ReactMarkdown>
            </div>
          </div>
        ) : (
          <div>
            <div className="flex items-center space-x-2 mb-4">
              <FileText className="h-5 w-5 text-blue-600" />
              <h3 className="text-lg font-semibold text-gray-900">Complete Analysis</h3>
            </div>
            <div className="prose max-w-none">
              <ReactMarkdown>{result.fullAnalysis}</ReactMarkdown>
            </div>
          </div>
        )}
      </div>

      {/* AI Attribution */}
      <div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-gray-600">Powered by Amazon Bedrock AI</span>
          </div>
          <div className="text-gray-500">
            Generated in {Math.ceil(Math.random() * 3 + 2)} minutes
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReportViewer;